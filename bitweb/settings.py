"""
Django settings for bitweb project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-&1a6u6k#s9ypu#&+7!gz!u1p=txpe!my%#bts891x6!d$-gt0!'
with open(os.path.join(BASE_DIR, 'sk', 'secret_key.txt')) as f:
    SECRET_KEY = f.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False

ALLOWED_HOSTS = [
    'localhost:8000', #로컬 테스트용 ip
    'localhost:8080', #로컬 테스트용 ip
    '127.0.0.1',   # 로컬 테스트용 ip
    'ec2-15-165-141-67.ap-northeast-2.compute.amazonaws.com', # djaonno 서버 ec2 ip
    'ec2-3-36-56-207.ap-northeast-2.compute.amazonaws.com',
    '15.165.141.67', #aws ip
    '222.106.22.74:8000', #팀원 로컬 실행을 위한 ip
    '13.124.213.41',  # 팀원 로컬 실행 ip
    'ec2-13-124-213-41.ap-northeast-2.compute.amazonaws.com', # 서비스가 실행되는 springBoot 어플리케이션 ip
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'stock.apps.StockConfig', #주식 정보 관련된 application 등록
    'news.apps.NewsConfig',  # 뉴스 정보 관련한 application 등록
    'rest_framework',  # rest API 개발에 필요한 라이브러리
    'corsheaders',  # django-cors-headers , cors를 위해 필요한 라이브러리
    # 'storages', #s3 연동을 하고 싶다면 추가필요
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # cors 허용
    'django.middleware.common.CommonMiddleware',  # cors 관련되서 필요하다.
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

# cors 허용 ip
CORS_ORIGIN_WHITELIST = [
    'http://localhost:8080',  # 로컬호스트로 실행할 시 필요한 host,
    'http://127.0.0.1:8080',  # 로컬환경 테스트 시 혹시 127.0.0.1:8080 으로 실행할지도 몰라서 적어놓은 host
    'http://192.168.0.31:8080',
    'http://15.165.141.67:8080',
    'http://192.168.1.59:8080',
    'http://13.124.213.41:8080',
    'http://ec2-13-124-213-41.ap-northeast-2.compute.amazonaws.com:8080', #메인 서비스가 실행되는 springBoot 서버 host
]
# cors credential 허용
# CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True  # 쿠키가 요청에 포함할 수 있도록

ROOT_URLCONF = 'bitweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bitweb.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    #테스트 용 db, 로컬 실행시 주석 해제 필요
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }

    #aws rds 사용을 위한 설정, 로컬에서 테스트 시 주석처리가 필요
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': 'django-rds.cyxp7lkxqojp.ap-northeast-2.rds.amazonaws.com',
        'PORT': '3306',
        'NAME': 'django_rds',
        'USER': 'admin',
        'PASSWORD': '123654as',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# 관리할 앱 내의 static 디렉토리
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'stock', 'static'),
    os.path.join(BASE_DIR, 'news', 'static'),
]

# 루트 static 디렉토리
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


